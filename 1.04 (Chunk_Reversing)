#include<stdio.h>
#include<stdlib.h>
 
 
struct Node
{
    int data;
    struct Node* next;
};
 
 //initialise node reverse in the node custom datatype
struct Node *reverse (struct Node *head, int l)
{
    if (!head)
        return NULL;
   
    struct Node* current = head;
    struct Node* next = NULL;
    struct Node* prev = NULL;
    int count = 0;
   
     
     // while loop to check if current node is not the last node and count is less than 1, if true swap the elements, ending with adding a 1 to count. 
    while (current != NULL && count < l)
    {
        next  = current->next;
        current->next = prev;
        prev = current;
        current = next;
        count++;
    }
     
    if (next !=  NULL)
       head->next = reverse(next, l);
    return prev;
}
 
 //allocate memory to the nodes and swap the nodes
void push(struct Node** a, int new_data)
{
    struct Node* new_node =
            (struct Node*) malloc(sizeof(struct Node));
    new_node->data  = new_data;
    new_node->next = (*a);   
    (*a)    = new_node;
    
}
 
//print list of nodes
void printList(struct Node *node)
{
    while (node != NULL)
    {
        printf("%d  ", node->data);
        node = node->next;
    }
}   
 
int main(void)
{
   
    struct Node* head = NULL;

     push(&head, 9);
     push(&head, 8);
     push(&head, 7);
     push(&head, 6);
     push(&head, 5);
     push(&head, 4);
     push(&head, 3);
     push(&head, 2);
     push(&head, 1);          
 
     printf("\nGiven linked list \n");
     printList(head);
     head = reverse(head, 3);
 
     printf("\nReversed Linked list \n");
     printList(head);
 
     return(0);
}
