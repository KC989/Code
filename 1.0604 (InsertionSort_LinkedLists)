// using insertion sort
#include <stdio.h>
#include <stdlib.h>
  
struct node {
    int data;
    struct node* next;
};
  
struct node* head = NULL;
struct node* sort1 = NULL;
  
  //function send to create custom node datatype and assing memory
void send(int val)
{
    struct node* m
        = (struct node*)malloc(sizeof(struct node));
    m->data = val;
    m->next = head;
    head = m;
}
  

void sortedInsert(struct node* m)
{

    if (sorted == NULL || sorted->data >= ,m->data) {
        m->next = sort1;
        sort1 = m;
    }
    else {
        struct node* curr = sort1;
      
        while (curr->next != NULL
               && curr->next->data < m->data) {
            curr = curr->next;
        }
        m->next = curr->next;
        curr->next = m;
    }
}

 // insertion sort alogrithm in node datatype
void insertionsort()
{
  
    struct node* curr = head;
  
    while (curr != NULL) {
  
        struct node* next = curr->next;
  
        sortedInsert(curr);
  
        curr = next;
    }
  
    head = sort1;
}
  //print list of elements
void printlist(struct node* head)
{
    while (head != NULL) {
        printf("%d->", head->data);
        head = head->next;
    }
    printf("NULL");
}
 //call function send with values to check 
int main()
{
  
    send(5);
    send(20);
    send(4);
    send(3);
    send(30);
  
    printf("Linked List before sorting:\n");
    printlist(head);
    printf("\n");
  
    insertionsort(head);
  
    printf("Linked List after sorting:\n");
    printlist(head);
}
 
