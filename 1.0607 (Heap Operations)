#include <stdio.h>
int size = 0;
void swap(int *a1, int *b1)
{
  int temp = *b1;
  *b1 = *a1;
  *a1 = temp;
}

// algorithm to check whether the values of root, left child as well as right child are larger compared to each other and swap them.
void heapI(int array[], int size, int f)
{
  if (size == 1)
  {
    printf("Single element in the heap");
  }
  else
  {
    int largest = f;
    int l = 2 * f + 1;
    int r = 2 * f + 2;
    if (l < size && array[l] > array[largest])
      largest = l;
    if (r < size && array[r] > array[largest])
      largest = r;
    if (largest != f)
    {
      swap(&array[f], &array[largest]);
      heapI(array, size, largest);
    }
  }
}

//insert new numbers
void insert(int array[], int newNum)
{
  if (size == 0)
  {
    array[0] = newNum;
    size += 1;
  }
  else
  {
    array[size] = newNum;
    size += 1;
    for (int f = size / 2 - 1; i >= 0; i--)
    {
      heapI(array, size, f);
    }
  }
}
void extract_min(int array[], int num)
{
  int f;
  for (f = 0; f < size; f++)
  {
    if (num == array[f])
      break;
  }

  swap(&array[f], &array[size - 1]);
  size -= 1;
  for (int i = size / 2 - 1; i >= 0; i--)
  {
    heapI(array, size, f);
  }
}
void printArray(int array[], int size)
{
  for (int f = 0; f < size; ++f)
    printf("%d ", array[f]);
  printf("\n");
}
int main()
{
  int array[10];

  insert(array, 3);
  insert(array, 4);
  insert(array, 9);
  insert(array, 5);
  insert(array, 2);

  printf("Max-Heap array: ");
  printArray(array, size);

  delRoot(array, 4);

  printf("After deleting an element: ");

  printArray(array, size);
}
