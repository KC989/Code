#include <stdio.h>
#include <stdlib.h>
 

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int value)
{

    struct Node* node
        = (struct Node*)malloc(sizeof(struct Node));
    if (node == NULL) {

        printf("Memory overflow\n");
    }
    else {
        node->data = value;
        node->next = NULL;
        if (*head == NULL) {
            *head = node;
        }
        else {
            struct Node* temp = *head;
 
       
            while (temp->next != NULL) {
                temp = temp->next;
            }
 
       
            temp->next = node;
        }
    }
}
 

void display(struct Node* head)
{
    if (head == NULL) {
        printf("Empty linked list");
        return;
    }
    struct Node* temp = head;
    printf("\n Linked List :");
    while (temp != NULL) {
        printf("  %d", temp->data);
        temp = temp->next;
    }
}
 

struct Node* last_node(struct Node* head)
{
    struct Node* temp = head;
    while (temp != NULL && temp->next != NULL) {
        temp = temp->next;
    }
    return temp;
}
 

struct Node* lastNodePosition(struct Node* first, struct Node* last)
{
    // Get first node of given linked list
    struct Node* piv = first;
    struct Node* front = first;
    int temp = 0;
    while (front != NULL && front != last) {
        if (front->data < last->data) {
            piv = first;
            temp = first->data;
            first->data = front->data;
            front->data = temp;
            first = first->next;
        }
   
        front = front->next;
    }
 

    temp = first->data;
    first->data = last->data;
    last->data = temp;
    return piv;
}
 

void quick_sort(struct Node* first, struct Node* last)
{
    if (first == last) {
        return;
    }
    struct Node* piv = lastNodePosition(first, last);
 
    if (piv != NULL && piv->next != NULL) {
        quick_sort(piv->next, last);
    }
 
    if (piv != NULL && first != piv) {
        quick_sort(first, piv);
    }
}
 

int main()
{
    struct Node* head = NULL;
 
    // Create linked list
    insert(&head, 26);
    insert(&head, 7);
    insert(&head, 2);
    insert(&head, 3);
    insert(&head, 38);
    insert(&head, 4);
    insert(&head, 9);
    insert(&head, 34);
    insert(&head, 64);
    insert(&head, 27);
    printf("\n Before Sort ");
    display(head);
 
 
    quick_sort(head, last_node(head));
    printf("\n After Sort ");
    display(head);
    return 0;
}
